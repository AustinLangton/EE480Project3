For the testing a seperate verilog file created to implement displays.
Displays were added on every insruction of every stage.
Since the stages are running in parallel they may not necesarily be sequential,
but we found it helpful to see exactly which instructions were called in which stage.
The instructions were labeled wih the number followed by the instruction name, to see what was called.
For testing verification we simply ran basic assembly instructions generated by AIK.
The test cases were kept short to ensure their functionaility.
The vvp output shows the bottom 5 register and the bottom 5 registers if the second thread in stage 2.


******************************************************NOTES***************************************
-Tried manually altering the clock five or 6 times after the loop in test bench due to testbenchstopping
as soon as threads halt.

-We found that we originally had a problem with stage 2 Push it was always using Pre.

-We were stuck for a long time because stage 1 was loading from the
 instruction register which doesn't have anything loaded yet



The following is an output of test cases folllowed by the first 5 registers in each 
thread of every clock cycle:



********** Test 1 **********
Instruction: Add 3 + 2

Assembly Instruction: Push 3 
                      Push 2
                      Add
                      Sys

@0000
7003
7002
f010
cfff


********** Test 2 **********
Instruction: Sub 3 - 2

Assembly Instruction: Push 3 
                      Push 2
                      Sub
                      Sys
Encoding:@0000
	 7003
	 7002
 	 f011
	 cfff


********** Test 3 **********
Instruction: Or 3 | 2

Assembly Instruction: Push 3 
                      Push 2
                      Or
                      Sys
Encoding:@0000
	 7003
	 7002
 	 f012
	 cfff

********** Test 4 **********
Instruction: Xor 3 ^ 2

Assembly Instruction: Push 3 
                      Push 2
                      Xor
                      Sys
Encoding:@0000
	 7003
	 7002
 	 f013
	 cfff

********** Test 5 **********
Instruction: And 3 & 2

Assembly Instruction: Push 3 
                      Push 2
                      And
                      Sys
Encoding:@0000
	 7003
	 7002
 	 f015
	 cfff

********** Test 6 **********
Instruction: Lt (3 < 2)

Assembly Instruction: Push 3 
                      Push 2
                      Lt
                      Sys
Encoding:@0000
	 7003
	 7002
 	 f014
	 cfff


********** Test 7 **********
Instruction: Pop 3

Assembly Instruction: Push 3 
                      Push 2
                      Push 4
                      Push 5
                      Pop 3
                      Sys
Encoding:@0000
	 7003
	 7002
 	 7004
	 7005
	 1003
	 cfff


********** Test 8 **********
Instruction: Get 3

Assembly Instruction: Push 3 
                      Push 2
                      Push 4
                      Push 5
                      Get 3
                      Sys
Encoding:@0000
	 7003
	 7002
	 7004
	 7005
	 0003
	 cfff


********** Test 9 **********
Instruction: Put 2

Assembly Instruction: Push 3 
                      Push 2
                      Push 4
                      Put 2
                      Sys
Encoding:@0000
	 7003
	 7002
	 7004
	 2002
	 cfff


********** Test 10 **********
Instruction: Pop 3

Assembly Instruction: Push 3 
                      Push 2
                      Push 4
                      Put 2
		      Pop 3
                      Sys
Encoding:@0000
	 7003
	 7002
	 7004
	 2002
	 1003
	 cfff

********** Test 11 **********
Instruction: Dup

Assembly Instruction: Push 3 
                      Push 2
		      Dup
                      Sys
Encoding:@0000
	 7003
	 7002
	 8fff
	 cfff

********** Test 12 **********
Instruction: Test

Assembly Instruction: Push 3 
                      Push 2
		      Test
                      Sys
Encoding:@0000
	 7003
	 7002
	 dfff
	 cfff

********** Test 13 **********
Instruction: Load/Store

Assembly Instruction: Push 1 
                      Push 2
		      Store
		      Load
                      Sys
Encoding:@0000
	 7001
	 7002
	 bfff
	 9fff
	 cfff

********** Test 14 **********
Instruction: Ret

Assembly Instruction: Push 1 
                      Push 4		      
		      Ret
                      Sys
Encoding: @0000
	  7001
	  7004
	  afff
	  cfff

********** Test 15 **********
Instruction: Jump

Assembly Instruction: Push 1 
                      Push 4
		      Push 2 
                      Push 3		      
		      Jump A
                      Sys
A:		      Add
		      Sys
Encoding: @0000
	  7001
	  7004
	  7002
	  7003
	  6006
	  cfff
	  f010
	  cfff

********** Test 16 **********
Instruction: JumpF

Assembly Instruction: Push 1 
                      Push 4
		      Push 2 
                      Push 0
		      Test		      
		      JumpF A
                      Sys
A:		      Add
		      Sys
Encoding: @0000
	  7001
	  7004
 	  7002
	  7000
	  dfff
	  4007
	  cfff
	  f010
	  cfff

********** Test 17 **********
Instruction: JumpT

Assembly Instruction: Push 1 
                      Push 4
		      Push 2 
                      Push 1
		      Test		      
		      JumpF A
                      Sys
A:		      Add
		      Sys
Encoding: @0000
	  7001
	  7004
 	  7002
	  7001
	  dfff
	  5007
	  cfff
	  f010
	  cfff

********** Test 18 **********
Instruction: Call

Assembly Instruction: Push 1 
             	      Push 4
	     	      Push 2 
             	      Push 1
	 	      Call A
		     A: Add
   			Sys

Encoding: @0000
	  7001
	  7004
	  7002
	  7001
	  3005
	  f010
	  cfff

********** Test 19 **********
Instruction: Push

Assembly Instruction: Push 1 
                      Push 4
		      Push 2 
                      Push 1
		      Sys
Encoding: @0000
	  7001
	  7004
 	  7002
	  7001
	  cfff

********** Test 20 **********
Instruction: Push 1 
             Push 4
	     Push 2 
             Push 1
             Add
	     Sub
	     Or
	     Xor
	     And
	     Lt
	     Get 1 
	     Pop 1
	     Put 1
	     Dup
	     Store
	     Load
	     Test
	     Ret
	     Jump B
B:	     Test
             JumpF C
C:	     Lt
             JumpT D
D:	     Call  E
E:	     Sys

Encoding: @0000
	  7001
	  7004
	  7002
	  7001
	  f010
	  f011
 	  f012
	  f013
 	  f015
	  f014
  	  0001
	  1001
	  2001
	  8fff
	  bfff
 	  9fff
	  dfff
	  afff
	  6013
	  dfff
	  4015
	  f014
	  5017
	  3018
	  cfff
